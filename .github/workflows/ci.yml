name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run unit tests
      run: |
        cd backend
        pytest tests/test_auth.py tests/test_iht.py tests/test_export.py -v --cov=app --cov-report=xml

    - name: Run integration tests
      run: |
        cd backend
        pytest tests/test_integration.py -v

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run TypeScript compilation check
      run: |
        cd frontend
        npm run build

    - name: Run unit tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  lint:
    name: Linting
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy

    - name: Lint Python code
      run: |
        cd backend
        black --check .
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Install Node dependencies
      run: |
        cd frontend
        npm ci

    - name: Lint TypeScript/React code
      run: |
        cd frontend
        npm run lint || true  # Don't fail on lint warnings

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Run security scan on Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety
        cd backend
        safety check -r requirements.txt || true  # Don't fail on warnings

    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level=high || true  # Only fail on high severity

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, lint]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Build backend
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -c "from app.main import app; print('Backend build successful')"

    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker images
      run: |
        docker build -t finplan-backend:${{ github.sha }} ./backend
        docker build -t finplan-frontend:${{ github.sha }} ./frontend

    - name: Save Docker images
      run: |
        docker save finplan-backend:${{ github.sha }} > backend-image.tar
        docker save finplan-frontend:${{ github.sha }} > frontend-image.tar

    - name: Upload Docker images
      uses: actions/upload-artifact@v3
      with:
        name: docker-images
        path: |
          backend-image.tar
          frontend-image.tar